require './intcode.rb'

program = [3,8,1005,8,328,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,1001,8,0,29,1,104,7,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,0,10,4,10,1001,8,0,55,1,2,7,10,1006,0,23,3,8,102,-1,8,10,1001,10,1,10,4,10,1008,8,0,10,4,10,1001,8,0,84,1006,0,40,1,1103,14,10,1,1006,16,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,1002,8,1,116,1006,0,53,1,1104,16,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,102,1,8,146,2,1104,9,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,1001,8,0,172,1006,0,65,1,1005,8,10,1,1002,16,10,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,102,1,8,204,2,1104,9,10,1006,0,30,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,102,1,8,233,2,1109,6,10,1006,0,17,1,2,6,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,102,1,8,266,1,106,7,10,2,109,2,10,2,9,8,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,1001,8,0,301,1,109,9,10,1006,0,14,101,1,9,9,1007,9,1083,10,1005,10,15,99,109,650,104,0,104,1,21102,1,837548789788,1,21101,0,345,0,1106,0,449,21101,0,846801511180,1,21101,0,356,0,1106,0,449,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21101,235244981271,0,1,21101,403,0,0,1105,1,449,21102,1,206182744295,1,21101,0,414,0,1105,1,449,3,10,104,0,104,0,3,10,104,0,104,0,21102,837896937832,1,1,21101,0,437,0,1106,0,449,21101,867965862668,0,1,21102,448,1,0,1106,0,449,99,109,2,22102,1,-1,1,21101,40,0,2,21102,1,480,3,21101,0,470,0,1106,0,513,109,-2,2106,0,0,0,1,0,0,1,109,2,3,10,204,-1,1001,475,476,491,4,0,1001,475,1,475,108,4,475,10,1006,10,507,1101,0,0,475,109,-2,2106,0,0,0,109,4,1201,-1,0,512,1207,-3,0,10,1006,10,530,21102,1,0,-3,22102,1,-3,1,21201,-2,0,2,21102,1,1,3,21102,549,1,0,1106,0,554,109,-4,2105,1,0,109,5,1207,-3,1,10,1006,10,577,2207,-4,-2,10,1006,10,577,21202,-4,1,-4,1106,0,645,21202,-4,1,1,21201,-3,-1,2,21202,-2,2,3,21101,596,0,0,1106,0,554,21201,1,0,-4,21102,1,1,-1,2207,-4,-2,10,1006,10,615,21101,0,0,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,637,22102,1,-1,1,21101,637,0,0,105,1,512,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2106,0,0]

class Robot
  attr_reader :x, :y, :facing
  attr :brain
  attr_accessor :surface

  def initialize(brain, surface={}, x=0, y=0)
    @brain = brain
    @surface = surface
    @x=x
    @y=y
    @facing = 90
  end

  def run
    needs_input = true
    while(needs_input)
    # 8.times do
      current = surface[[@x, @y]] || 0
      # puts "(#{@x}, #{@y}): #{current}"

      output = brain.resume_with_input(current)

      # puts output.to_s
      needs_input = output[0]
      state_updates = output[1].pop(2)
      surface[[@x, @y]] = state_updates[0]
      @facing += state_updates[1] > 0 ? -90 : 90
      # puts @facing

      move
    end
  end

  def move
    @facing = (@facing + 360) % 360
    # puts @facing
    case @facing
    when 0
      # right
      @x += 1
    when 90
      # up
      @y += 1
    when 180
      # left
      @x -= 1
    when 270
      # down
      @y -= 1
    else
      puts "Error! Robot moving off-grid! #{@facing}"
      exit
    end
  end
end

def print_surface(surface)
  # puts surface.keys.to_s
  min_x = surface.keys.min {|k1, k2| k1[0] <=> k2[0]}[0]
  min_y = surface.keys.min {|k1, k2| k1[1] <=> k2[1]}[1]
  max_x = surface.keys.max {|k1, k2| k1[0] <=> k2[0]}[0]
  max_y = surface.keys.max {|k1, k2| k1[1] <=> k2[1]}[1]
  # Start in top left
  puts "Drawing (#{min_x}, #{max_y}) to (#{max_x}, #{min_y})"
  puts "@" * (max_x - min_x + 1)
  max_y.downto(min_y).each do |j|
    for i in min_x..max_x
      print (surface[[i,j]] || 0) > 0 ? "." : "#"
    end
    print "\n"
  end
  puts "@" * (max_x - min_x + 1)
end

# Part One
# surface = {}
# Part Two - emergency start panel
surface = {[0,0] => 1}

painting_cpu = Intcode.new(program)
hull_painter = Robot.new(painting_cpu, surface)

hull_painter.run
# Part One
puts surface.size
# Part Two
print_surface(surface)
